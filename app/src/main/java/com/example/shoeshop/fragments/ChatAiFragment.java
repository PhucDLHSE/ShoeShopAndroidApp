package com.example.shoeshop.fragments;

import android.content.Context;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.Toast;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.fragment.app.Fragment;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;
import com.example.shoeshop.Interface.NewProductListener;
import com.example.shoeshop.R;
import com.example.shoeshop.adapters.ChatAdapter;
import com.example.shoeshop.models.ChatMessage;
import com.example.shoeshop.models.ChatMessageRequest;
import com.example.shoeshop.models.ChatSessionResponse;
import com.example.shoeshop.models.Product;
import com.example.shoeshop.network.ApiClient;
import com.example.shoeshop.network.ApiService;
import com.example.shoeshop.utils.SessionManager;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

public class ChatAiFragment extends Fragment {

    private EditText etMessage;
    private ImageButton btnSend;
    private RecyclerView recyclerChat;
    private ChatAdapter chatAdapter;
    private List<ChatMessage> messageList;
    private ApiService apiService;
    private SessionManager sessionManager;
    private NewProductListener newProductListener; // ƒê√¢y l√† MainActivity
    private String currentChatSessionId;
    private String currentUserId;
    private Handler pollingHandler = new Handler(Looper.getMainLooper());
    private Runnable pollingRunnable;
    private final long POLLING_INTERVAL = 30 * 1000; // 30 gi√¢y

    @Override
    public void onAttach(@NonNull Context context) {
        super.onAttach(context);
        if (context instanceof NewProductListener) {
            newProductListener = (NewProductListener) context;
            sessionManager = new SessionManager(context);
            // KH√îNG ƒê·∫∂T setListener ·ªü ƒë√¢y cho ChatAiFragment.
            // MainActivity l√† ƒë·ªëi t∆∞·ª£ng l·∫Øng nghe ch√≠nh c·ªßa SessionManager ƒë·ªÉ nh·∫≠n th√¥ng b√°o s·∫£n ph·∫©m m·ªõi.
            // ChatAiFragment s·∫Ω *ƒë·ªçc* d·ªØ li·ªáu s·∫£n ph·∫©m m·ªõi tr·ª±c ti·∫øp t·ª´ SessionManager.
            // (ƒê√£ b·ªè: sessionManager.setNewProductListener(newProductListener);)
        } else {
            throw new RuntimeException(context.toString() + " must implement NewProductListener");
        }
    }

    @Override
    public void onDetach() {
        super.onDetach();
        newProductListener = null;
    }

    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        return inflater.inflate(R.layout.fragment_chat_ai, container, false);
    }

    @Override
    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);

        etMessage = view.findViewById(R.id.etMessage);
        btnSend = view.findViewById(R.id.btnSend);
        btnSend.setBackgroundTintList(null); // ƒê·∫£m b·∫£o m√†u n·ªÅn n√∫t kh√¥ng b·ªã ·∫£nh h∆∞·ªüng
        recyclerChat = view.findViewById(R.id.recyclerChat);
        messageList = new ArrayList<>();
        chatAdapter = new ChatAdapter(messageList);
        recyclerChat.setLayoutManager(new LinearLayoutManager(getContext()));
        recyclerChat.setAdapter(chatAdapter);
        apiService = ApiClient.getClient().create(ApiService.class);

        if (sessionManager == null && getContext() != null) {
            sessionManager = new SessionManager(getContext());
        }

        currentUserId = sessionManager.getUserId();
        if (currentUserId == null || currentUserId.isEmpty()) {
            Toast.makeText(getContext(), "Kh√¥ng t√¨m th·∫•y User ID. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.", Toast.LENGTH_LONG).show();
            return;
        }

        // Ban ƒë·∫ßu x√≥a tin nh·∫Øn tr∆∞·ªõc khi t·∫£i, ƒë·ªÉ ƒë·∫£m b·∫£o tr·∫°ng th√°i s·∫°ch
        messageList.clear();
        chatAdapter.notifyDataSetChanged();

        // B·∫Øt ƒë·∫ßu ho·∫∑c t·∫£i phi√™n chat
        startOrLoadChatSession(currentUserId);

        btnSend.setOnClickListener(v -> {
            String userInput = etMessage.getText().toString().trim();
            if (!userInput.isEmpty()) {
                if (currentChatSessionId == null || currentChatSessionId.isEmpty()) {
                    Toast.makeText(getContext(), "Phi√™n chat ch∆∞a s·∫µn s√†ng, ƒëang kh·ªüi t·∫°o l·∫°i...", Toast.LENGTH_SHORT).show();
                    startOrLoadChatSession(currentUserId);
                    return;
                }
                btnSend.setEnabled(false);
                addMessage("user", userInput);
                saveChatMessage(currentUserId, userInput, currentChatSessionId);

                addMessage("assistant", "ü§ñ AI ƒëang t√¨m ki·∫øm s·∫£n ph·∫©m...");
                etMessage.setText("");
                handleSearch(userInput);
            }
        });

        // Polling Runnable: CH·ªà K√çCH HO·∫†T KI·ªÇM TRA S·∫¢N PH·∫®M M·ªöI T·ª™ SESSIONMANAGER.
        // KH√îNG G·ªåI displayNewProductsIfAny() TR·ª∞C TI·∫æP T·ª™ POLLING N√ÄY.
        // V√¨ displayNewProductsIfAny() s·∫Ω ƒë∆∞·ª£c g·ªçi khi fragment hi·ªÉn th·ªã v√† nh·∫≠n ƒë∆∞·ª£c d·ªØ li·ªáu.
        pollingRunnable = new Runnable() {
            @Override
            public void run() {
                sessionManager.checkNewProductsFromApi(); // SessionManager s·∫Ω th√¥ng b√°o cho MainActivity
                pollingHandler.postDelayed(this, POLLING_INTERVAL);
            }
        };
    }

    @Override
    public void onResume() {
        super.onResume();
        startPolling();
        // Khi fragment resume, ta CH·ªà C·∫¶N ki·ªÉm tra v√† hi·ªÉn th·ªã s·∫£n ph·∫©m m·ªõi n·∫øu c√≥
        // m√† SessionManager ƒë√£ t·∫£i v·ªÅ. KH√îNG c·∫ßn g·ªçi SessionManager.checkNewProductsFromApi() ·ªü ƒë√¢y.
        // Vi·ªác n√†y ƒë√£ do MainActivity th·ª±c hi·ªán th√¥ng qua listener c·ªßa n√≥.
        displayNewProductsIfAny();
    }

    @Override
    public void onPause() {
        super.onPause();
        stopPolling();
    }

    @Override
    public void onDestroyView() {
        super.onDestroyView();
        stopPolling();
    }

    private void startOrLoadChatSession(String userId) {
        final String savedChatSessionId = sessionManager.getChatSessionIdForUser(userId);

        if (savedChatSessionId != null && !savedChatSessionId.isEmpty()) {
            currentChatSessionId = savedChatSessionId;
            Log.d("ChatAI", "Loaded existing chat session: " + currentChatSessionId + " for user: " + userId);

            addMessage("assistant", "ƒêang t·∫£i l·ªãch s·ª≠ chat...");

            apiService.getChatMessages(currentChatSessionId).enqueue(new Callback<List<ChatMessage>>() {
                @Override
                public void onResponse(Call<List<ChatMessage>> call, Response<List<ChatMessage>> response) {
                    if (isAdded()) {
                        requireActivity().runOnUiThread(() -> {
                            // X√≥a tin nh·∫Øn "ƒëang t·∫£i" ho·∫∑c l·ªói tr∆∞·ªõc ƒë√≥
                            removeLoadingOrErrorMessage();

                            messageList.clear(); // X√≥a s·∫°ch ƒë·ªÉ th√™m l·ªãch s·ª≠ m·ªõi

                            if (response.isSuccessful() && response.body() != null) {
                                List<ChatMessage> fetchedMessages = response.body();
                                if (fetchedMessages.isEmpty()) {
                                    Log.d("ChatAI", "No chat messages found for session: " + currentChatSessionId);
                                    addMessage("assistant", "Ch√†o m·ª´ng b·∫°n tr·ªü l·∫°i! Kh√¥ng c√≥ tin nh·∫Øn n√†o trong phi√™n n√†y. H√£y b·∫Øt ƒë·∫ßu m·ªôt cu·ªôc tr√≤ chuy·ªán m·ªõi.");
                                } else {
                                    Log.d("ChatAI", "Loaded " + fetchedMessages.size() + " messages for session: " + currentChatSessionId);
                                    for (com.example.shoeshop.models.ChatMessage msg : fetchedMessages) {
                                        addMessage(msg.getSenderID().equals(currentUserId) ? "user" : "assistant", msg.getMessage());
                                    }
                                }
                            } else {
                                Log.e("ChatAI", "Failed to load chat messages: " + response.code() + " - " + response.message());
                                addMessage("assistant", "L·ªói khi t·∫£i l·ªãch s·ª≠ chat: " + response.code() + " - " + response.message());
                            }

                            // SAU KHI T·∫§T C·∫¢ L·ªäCH S·ª¨ ƒê√É ƒê∆Ø·ª¢C TH√äM V√ÄO, B√ÇY GI·ªú HI·ªÇN TH·ªä S·∫¢N PH·∫®M M·ªöI.
                            // displayNewProductsIfAny() s·∫Ω ki·ªÉm tra v√† hi·ªÉn th·ªã n·∫øu c√≥.
                            displayNewProductsIfAny();
                            recyclerChat.scrollToPosition(messageList.size() - 1);
                        });
                    }
                }

                @Override
                public void onFailure(Call<List<ChatMessage>> call, Throwable t) {
                    Log.e("ChatAI", "Error loading chat messages", t);
                    if (isAdded()) {
                        requireActivity().runOnUiThread(() -> {
                            removeLoadingOrErrorMessage();
                            addMessage("assistant", "L·ªói k·∫øt n·ªëi khi t·∫£i l·ªãch s·ª≠ chat: " + t.getMessage());
                            displayNewProductsIfAny(); // V·∫´n ki·ªÉm tra SP m·ªõi ngay c·∫£ khi l·ªói t·∫£i l·ªãch s·ª≠
                            recyclerChat.scrollToPosition(messageList.size() - 1);
                        });
                    }
                }
            });

        } else {
            Log.d("ChatAI", "No existing chat session found for user: " + userId + ". Starting a new one.");
            startNewChatSession(userId);
        }
    }

    private void startNewChatSession(String userId) {
        messageList.clear(); // Lu√¥n x√≥a khi b·∫Øt ƒë·∫ßu phi√™n m·ªõi
        chatAdapter.notifyDataSetChanged();
        addMessage("assistant", "ƒêang kh·ªüi t·∫°o phi√™n chat m·ªõi...");

        apiService.startChatSession(userId).enqueue(new Callback<ChatSessionResponse>() {
            @Override
            public void onResponse(Call<ChatSessionResponse> call, Response<ChatSessionResponse> response) {
                if (isAdded()) {
                    requireActivity().runOnUiThread(() -> {
                        removeLoadingOrErrorMessage();

                        if (response.isSuccessful() && response.body() != null) {
                            currentChatSessionId = response.body().getChatSessionID();
                            sessionManager.saveChatSessionIdForUser(userId, currentChatSessionId);
                            Log.d("ChatAI", "Started new chat session: " + currentChatSessionId + " for user: " + userId);
                            addMessage("assistant", "Ch√†o b·∫°n, t√¥i l√† tr·ª£ l√Ω AI. B·∫°n mu·ªën t√¨m s·∫£n ph·∫©m n√†o?");
                            displayNewProductsIfAny(); // Sau khi kh·ªüi t·∫°o, ki·ªÉm tra v√† hi·ªÉn th·ªã SP m·ªõi
                        } else {
                            Log.e("ChatAI", "Failed to start chat session: " + response.code() + " - " + response.message());
                            Toast.makeText(getContext(), "Kh√¥ng th·ªÉ b·∫Øt ƒë·∫ßu phi√™n chat.", Toast.LENGTH_SHORT).show();
                            currentChatSessionId = null;
                            addMessage("assistant", "L·ªói: Kh√¥ng th·ªÉ b·∫Øt ƒë·∫ßu phi√™n chat. M√£ l·ªói: " + response.code());
                        }
                        recyclerChat.scrollToPosition(messageList.size() - 1);
                    });
                }
            }

            @Override
            public void onFailure(Call<ChatSessionResponse> call, Throwable t) {
                Log.e("ChatAI", "Error starting chat session", t);
                if (isAdded()) {
                    requireActivity().runOnUiThread(() -> {
                        removeLoadingOrErrorMessage();
                        Toast.makeText(getContext(), "L·ªói k·∫øt n·ªëi khi b·∫Øt ƒë·∫ßu chat.", Toast.LENGTH_SHORT).show();
                        currentChatSessionId = null;
                        addMessage("assistant", "L·ªói k·∫øt n·ªëi khi b·∫Øt ƒë·∫ßu chat: " + t.getMessage());
                        recyclerChat.scrollToPosition(messageList.size() - 1);
                    });
                }
            }
        });
    }

    // Helper method to remove loading/error messages
    private void removeLoadingOrErrorMessage() {
        if (!messageList.isEmpty() && "assistant".equals(messageList.get(messageList.size() - 1).getRole())) {
            String lastAssistantMsgContent = messageList.get(messageList.size() - 1).getContent();
            if (lastAssistantMsgContent.equals("ƒêang t·∫£i l·ªãch s·ª≠ chat...") ||
                    lastAssistantMsgContent.equals("ƒêang kh·ªüi t·∫°o phi√™n chat m·ªõi...") ||
                    lastAssistantMsgContent.startsWith("L·ªói khi t·∫£i l·ªãch s·ª≠ chat:") ||
                    lastAssistantMsgContent.startsWith("L·ªói k·∫øt n·ªëi khi t·∫£i l·ªãch s·ª≠ chat:")) {
                messageList.remove(messageList.size() - 1);
                chatAdapter.notifyItemRemoved(messageList.size());
            }
        }
    }


    private void saveChatMessage(String senderId, String messageContent, String sessionId) {
        if (sessionId == null || sessionId.isEmpty()) {
            Log.e("ChatAI", "Cannot save message: ChatSessionID is null or empty.");
            return;
        }
        ChatMessageRequest messageRequest = new ChatMessageRequest(senderId, messageContent, sessionId);
        apiService.sendChatMessage(messageRequest).enqueue(new Callback<Void>() {
            @Override
            public void onResponse(Call<Void> call, Response<Void> response) {
                if (response.isSuccessful()) {
                    Log.d("ChatAI", "Message saved successfully.");
                } else {
                    Log.e("ChatAI", "Failed to save message: " + response.code() + " - " + response.message());
                }
            }

            @Override
            public void onFailure(Call<Void> call, Throwable t) {
                Log.e("ChatAI", "Error saving message", t);
            }
        });
    }

    private void addMessage(String role, String content) {
        messageList.add(new ChatMessage(role, content));
        if (isAdded()) {
            requireActivity().runOnUiThread(() -> {
                chatAdapter.notifyItemInserted(messageList.size() - 1);
                recyclerChat.scrollToPosition(messageList.size() - 1);
            });
        }
    }

    private void replaceLastAssistantMessage(String newContent) {
        if (isAdded()) {
            requireActivity().runOnUiThread(() -> {
                for (int i = messageList.size() - 1; i >= 0; i--) {
                    if ("assistant".equals(messageList.get(i).getRole())) {
                        messageList.get(i).setContent(newContent);
                        chatAdapter.notifyItemChanged(i);
                        recyclerChat.scrollToPosition(i);
                        return;
                    }
                }
                addMessage("assistant", newContent); // Fallback if no assistant message found
            });
        }
    }

    private void handleSearch(String prompt) {
        ProductSearchInfo info = extractProductInfo(prompt.toLowerCase(Locale.getDefault()));

        Log.d("ChatAI", "Search: name=" + info.productName + ", size=" + info.size + ", color=" + info.color
                + ", minPrice=" + info.minPrice + ", maxPrice=" + info.maxPrice);

        Log.d("ChatAI", "Parsed minPrice: " + info.minPrice + ", Parsed maxPrice: " + info.maxPrice);

        Call<List<Product>> call = apiService.searchProducts(
                info.productName, info.size, info.color, info.minPrice, info.maxPrice
        );

        call.enqueue(new Callback<List<Product>>() {
            @Override
            public void onResponse(Call<List<Product>> call, Response<List<Product>> response) {
                String aiReply;
                if (response.isSuccessful() && response.body() != null) {
                    List<Product> products = response.body();
                    if (products.isEmpty()) {
                        aiReply = "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o ph√π h·ª£p v·ªõi y√™u c·∫ßu c·ªßa b·∫°n.";
                    } else {
                        StringBuilder reply = new StringBuilder("T√¨m th·∫•y c√°c s·∫£n ph·∫©m sau:\n");
                        for (Product product : products) {
                            reply.append("- ").append(product.getProductName())
                                    .append(" (Size: ").append(product.getSize())
                                    .append(", M√†u: ").append(product.getColor())
                                    .append(" Gi√°: ").append(String.format(Locale.getDefault(), "%,.0f", product.getTotal()))
                                    .append(" VNƒê)\n");
                        }
                        aiReply = reply.toString().trim();
                    }
                } else {
                    aiReply = "‚ùå L·ªói t·ª´ m√°y ch·ªß: " + response.code();
                }

                if (isAdded()) {
                    requireActivity().runOnUiThread(() -> {
                        replaceLastAssistantMessage(aiReply);
                        saveChatMessage("assistant", aiReply, currentChatSessionId);
                        btnSend.setEnabled(true);
                    });
                }
            }

            @Override
            public void onFailure(Call<List<Product>> call, Throwable t) {
                String aiReply = "‚ùå L·ªói k·∫øt n·ªëi: " + t.getMessage();
                if (isAdded()) {
                    requireActivity().runOnUiThread(() -> {
                        replaceLastAssistantMessage(aiReply);
                        saveChatMessage("assistant", aiReply, currentChatSessionId);
                        btnSend.setEnabled(true);
                    });
                }
            }
        });
    }

    private static class ProductSearchInfo {
        String productName;
        String size;
        String color;
        Double minPrice;
        Double maxPrice;
    }

    private ProductSearchInfo extractProductInfo(String prompt) {
        ProductSearchInfo info = new ProductSearchInfo();

        // T·ªëi ∆∞u h√≥a vi·ªác tr√≠ch xu·∫•t t√™n s·∫£n ph·∫©m
        Matcher nameMatcherWithKeyword = Pattern.compile("(?:gi√†y|d√©p|s·∫£n ph·∫©m)\\s+([\\p{L}\\d\\s]{2,30})", Pattern.CASE_INSENSITIVE).matcher(prompt);
        if (nameMatcherWithKeyword.find()) {
            info.productName = nameMatcherWithKeyword.group(1).trim();
        } else {
            // Logic c≈© v·∫´n c√≥ th·ªÉ ƒë∆∞·ª£c gi·ªØ l·∫°i l√†m fallback ho·∫∑c tinh ch·ªânh
            if (prompt.length() >= 2 && prompt.length() <= 30 &&
                    !prompt.contains("size") && !prompt.contains("m√†u") && !prompt.contains("gi√°") &&
                    !prompt.contains("t·ª´") && !prompt.contains("ƒë·∫øn") &&
                    !prompt.contains("tr√™n") && !prompt.contains("d∆∞·ªõi") &&
                    !prompt.contains("l√†") && !prompt.contains("g√¨")
            ) {
                info.productName = prompt;
            } else if (prompt.contains("gi√†y")) {
                info.productName = "gi√†y";
            } else if (prompt.contains("d√©p")) {
                info.productName = "d√©p";
            }
        }

        info.size = extractParameter(prompt, "\\b(?:gi√†y|size|s·ªë|c·ª°)\\s*(\\d{1,2})\\b", 1);

        info.color = extractParameter(prompt, "(?:m√†u|m√†u s·∫Øc)\\s+([^,.]+)", 1);
        if (info.color == null) {
            // Ki·ªÉm tra c√°c m√†u ph·ªï bi·∫øn
            for (String color : new String[]{"ƒë·ªè", "ƒëen", "tr·∫Øng", "xanh", "xanh d∆∞∆°ng", "xanh l√°", "v√†ng", "n√¢u", "cam", "h·ªìng", "ƒëas·∫Øc", "b·∫°c"}) {
                if (prompt.contains(color)) {
                    info.color = color;
                    break;
                }
            }
            // X·ª≠ l√Ω tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát "tr·∫Øng ƒëen"
            if (info.color == null && prompt.contains("tr·∫Øng ƒëen")) {
                info.color = "tr·∫Øng ƒëen";
            }
        }

        // Tinh ch·ªânh regex cho gi√° ƒë·ªÉ n√≥ linh ho·∫°t h∆°n
        Matcher priceRange = Pattern.compile("gi√°\\s*(?:t·ª´)?\\s*(\\d+(?:k|tr|tri·ªáu)?)\\s*(?:ƒë·∫øn|-|t·ªõi|d∆∞·ªõi)?\\s*(\\d+(?:k|tr|tri·ªáu)?)?", Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE).matcher(prompt);
        if (priceRange.find()) {
            info.minPrice = parsePrice(priceRange.group(1));
            // N·∫øu c√≥ group 2 v√† n√≥ kh√¥ng r·ªóng, parse maxPrice
            if (priceRange.group(2) != null && !priceRange.group(2).isEmpty()) {
                info.maxPrice = parsePrice(priceRange.group(2));
            } else {
                // N·∫øu ch·ªâ c√≥ m·ªôt s·ªë ti·ªÅn v√† kh√¥ng c√≥ "ƒë·∫øn", c√≥ th·ªÉ coi ƒë√≥ l√† gi√° ch√≠nh x√°c ho·∫∑c gi√° t·ªëi thi·ªÉu
                info.maxPrice = info.minPrice; // Ho·∫∑c ƒë·ªÉ null n·∫øu b·∫°n mu·ªën t√¨m ki·∫øm gi√° ch√≠nh x√°c
            }
        } else {
            // X·ª≠ l√Ω c√°c tr∆∞·ªùng h·ª£p gi√° "tr√™n X", "d∆∞·ªõi Y", "gi√° X"
            info.minPrice = parsePrice(extractParameter(prompt, "(?:t·ª´|tr√™n|h∆°n|gi√° t·ª´)\\s*(\\d+(?:k|tr|tri·ªáu)?)", 1));
            info.maxPrice = parsePrice(extractParameter(prompt, "(?:ƒë·∫øn|d∆∞·ªõi|gi√° ƒë·∫øn|gi√° kho·∫£ng)\\s*(\\d+(?:k|tr|tri·ªáu)?)", 1));
            // Th√™m tr∆∞·ªùng h·ª£p ch·ªâ c√≥ m·ªôt gi√° duy nh·∫•t m√† kh√¥ng c√≥ t·ª´ kh√≥a "t·ª´", "ƒë·∫øn"
            if (info.minPrice == null && info.maxPrice == null) {
                Double exactPrice = parsePrice(extractParameter(prompt, "(?:gi√° l√†|gi√°)\\s*(\\d+(?:k|tr|tri·ªáu)?)", 1));
                if (exactPrice != null) {
                    info.minPrice = exactPrice;
                    info.maxPrice = exactPrice;
                }
            }
        }

        return info;
    }

    private String extractParameter(String text, String regex, int groupIndex) {
        Pattern pattern = Pattern.compile(regex, Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);
        Matcher matcher = pattern.matcher(text);
        return matcher.find() ? matcher.group(groupIndex).trim() : null;
    }

    private Double parsePrice(String priceString) {
        if (priceString == null) return null;
        priceString = priceString.replace(".", "").replace(",", "").toLowerCase();
        try {
            if (priceString.contains("k")) {
                return Double.parseDouble(priceString.replace("k", "")) * 1000;
            }
            if (priceString.contains("tr") || priceString.contains("tri·ªáu")) {
                return Double.parseDouble(priceString.replace("tr", "").replace("tri·ªáu", "")) * 1_000_000;
            }
            return Double.parseDouble(priceString);
        } catch (NumberFormatException e) {
            Log.e("ChatAI", "Error parsing price: '" + priceString + "'", e);
            return null;
        }
    }

    private void startPolling() {
        if (pollingRunnable != null) {
            pollingHandler.removeCallbacks(pollingRunnable);
            pollingHandler.post(pollingRunnable);
            Log.d("ChatAI", "Started new product polling (from ChatAiFragment).");
        }
    }

    private void stopPolling() {
        if (pollingRunnable != null) {
            pollingHandler.removeCallbacks(pollingRunnable);
            Log.d("ChatAI", "Stopped new product polling (from ChatAiFragment).");
        }
    }

    /**
     * Hi·ªÉn th·ªã danh s√°ch s·∫£n ph·∫©m m·ªõi trong chat n·∫øu c√≥.
     * Ph∆∞∆°ng th·ª©c n√†y ƒë∆∞·ª£c g·ªçi khi ng∆∞·ªùi d√πng v√†o ChatAiFragment v√† phi√™n chat ƒë∆∞·ª£c t·∫£i/kh·ªüi t·∫°o.
     * N√≥ c≈©ng s·∫Ω d·ªçn d·∫πp d·ªØ li·ªáu s·∫£n ph·∫©m m·ªõi sau khi hi·ªÉn th·ªã.
     */
    private void displayNewProductsIfAny() {
        Log.d("ChatAiFragment", "displayNewProductsIfAny() called.");
        List<Product> newProducts = sessionManager.getNewProducts();

        // Ch·ªâ hi·ªÉn th·ªã n·∫øu C√ì s·∫£n ph·∫©m m·ªõi V√Ä c·ªù "hasNewProducts" ƒëang TRUE
        // C·ªù "hasNewProducts" ƒë∆∞·ª£c ƒë·∫∑t b·ªüi `checkNewProductsFromApi` trong SessionManager (qua MainActivity)
        if (sessionManager.hasNewProducts() && newProducts != null && !newProducts.isEmpty()) {
            StringBuilder messageBuilder = new StringBuilder("üéâ H√¥m nay c√≥ ");
            messageBuilder.append(newProducts.size()).append(" s·∫£n ph·∫©m m·ªõi v·ª´a ra m·∫Øt! H√£y xem ngay:\n");

            for (Product product : newProducts) {
                messageBuilder.append("- ").append(product.getProductName())
                        .append(" (Gi√°: ").append(String.format(Locale.getDefault(), "%,.0f", product.getTotal()))
                        .append(" VNƒê)\n");
            }
            addMessage("assistant", messageBuilder.toString().trim());
            saveChatMessage("assistant", messageBuilder.toString().trim(), currentChatSessionId);

            // SAU KHI ƒê√É CH·∫ÆC CH·∫ÆN HI·ªÇN TH·ªä, X√ìA D·ªÆ LI·ªÜU S·∫¢N PH·∫®M M·ªöI V√Ä ƒê·∫∂T C·ªú HAS_NEW_PRODUCTS V·ªÄ FALSE
            sessionManager.clearNewProducts();
            sessionManager.setHasNewProducts(false); // ƒê·∫∑t l·∫°i c·ªù c√≥ s·∫£n ph·∫©m m·ªõi

            Log.d("ChatAiFragment", "New products displayed and cleared from SessionManager.");

            // Th√¥ng b√°o cho MainActivity r·∫±ng s·∫£n ph·∫©m m·ªõi ƒë√£ ƒë∆∞·ª£c hi·ªÉn th·ªã trong chat
            if (newProductListener != null) {
                newProductListener.onNewProductsDisplayedInChat(); // G·ªçi ƒë·ªÉ MainActivity ·∫©n badge
                Log.d("ChatAiFragment", "Notified MainActivity that new products were displayed in chat.");
            }
        } else {
            Log.d("ChatAiFragment", "No new products to display or already displayed/cleared.");
        }
    }
}