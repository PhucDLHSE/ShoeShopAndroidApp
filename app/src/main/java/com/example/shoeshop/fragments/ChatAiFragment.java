package com.example.shoeshop.fragments;

import android.content.Context;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.fragment.app.Fragment;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.example.shoeshop.R;
import com.example.shoeshop.adapters.ChatAdapter;
import com.example.shoeshop.models.ChatMessage;
import com.example.shoeshop.models.ChatMessageRequest;
import com.example.shoeshop.models.ChatSessionResponse;
import com.example.shoeshop.models.Product;
import com.example.shoeshop.network.ApiClient;
import com.example.shoeshop.network.ApiService;
import com.example.shoeshop.utils.SessionManager;

import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

public class ChatAiFragment extends Fragment {

    private EditText etMessage;
    private ImageButton btnSend;
    private RecyclerView recyclerChat;
    private ChatAdapter chatAdapter;
    private List<ChatMessage> messageList;

    private final Handler handler = new Handler(Looper.getMainLooper());
    private ApiService apiService;
    private SessionManager sessionManager;

    private String currentChatSessionId;
    private String currentUserId;

    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        return inflater.inflate(R.layout.fragment_chat_ai, container, false);
    }

    @Override
    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);

        etMessage = view.findViewById(R.id.etMessage);
        btnSend = view.findViewById(R.id.btnSend);
        btnSend.setBackgroundTintList(null); // ƒê·∫£m b·∫£o tint list kh√¥ng ·∫£nh h∆∞·ªüng
        recyclerChat = view.findViewById(R.id.recyclerChat);

        messageList = new ArrayList<>();
        chatAdapter = new ChatAdapter(messageList);
        recyclerChat.setLayoutManager(new LinearLayoutManager(getContext()));
        recyclerChat.setAdapter(chatAdapter);

        apiService = ApiClient.getClient().create(ApiService.class);
        sessionManager = new SessionManager(getContext());

        currentUserId = sessionManager.getUserId();

        if (currentUserId == null || currentUserId.isEmpty()) {
            Toast.makeText(getContext(), "Kh√¥ng t√¨m th·∫•y User ID. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.", Toast.LENGTH_LONG).show();
            // Optional: Chuy·ªÉn h∆∞·ªõng v·ªÅ LoginActivity n·∫øu User ID kh√¥ng c√≥
            // Intent intent = new Intent(getContext(), LoginActivity.class);
            // intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);
            // startActivity(intent);
            return;
        }

        // Lu√¥n clear danh s√°ch tin nh·∫Øn v√† adapter khi View c·ªßa Fragment ƒë∆∞·ª£c t·∫°o l·∫°i.
        // ƒêi·ªÅu n√†y ƒë·∫£m b·∫£o giao di·ªán lu√¥n m·ªõi tr∆∞·ªõc khi t·∫£i ho·∫∑c t·∫°o session.
        messageList.clear();
        chatAdapter.notifyDataSetChanged();

        // B·∫Øt ƒë·∫ßu ho·∫∑c t·∫£i phi√™n chat d·ª±a tr√™n UserID v√† Session ƒë√£ l∆∞u.
        startOrLoadChatSession(currentUserId);

        btnSend.setOnClickListener(v -> {
            String userInput = etMessage.getText().toString().trim();
            if (!userInput.isEmpty()) {
                // Ki·ªÉm tra l·∫°i currentChatSessionId tr∆∞·ªõc khi g·ª≠i tin nh·∫Øn
                if (currentChatSessionId == null || currentChatSessionId.isEmpty()) {
                    Toast.makeText(getContext(), "Phi√™n chat ch∆∞a s·∫µn s√†ng, ƒëang kh·ªüi t·∫°o l·∫°i...", Toast.LENGTH_SHORT).show();
                    // Th·ª≠ kh·ªüi t·∫°o l·∫°i session n·∫øu n√≥ b·ªã null (v√≠ d·ª•: l·ªói m·∫°ng tr∆∞·ªõc ƒë√≥)
                    startOrLoadChatSession(currentUserId);
                    return; // NgƒÉn g·ª≠i tin nh·∫Øn n·∫øu session ID ch∆∞a c√≥
                }

                btnSend.setEnabled(false); // V√¥ hi·ªáu h√≥a n√∫t g·ª≠i ƒë·ªÉ tr√°nh spam
                addMessage("user", userInput); // Hi·ªÉn th·ªã tin nh·∫Øn ng∆∞·ªùi d√πng ngay l·∫≠p t·ª©c
                saveChatMessage(currentUserId, userInput, currentChatSessionId); // L∆∞u tin nh·∫Øn ng∆∞·ªùi d√πng

                addMessage("assistant", "ü§ñ AI ƒëang t√¨m ki·∫øm s·∫£n ph·∫©m..."); // Hi·ªÉn th·ªã tin nh·∫Øn ch·ªù c·ªßa AI
                etMessage.setText(""); // X√≥a n·ªôi dung EditText
                handleSearch(userInput); // G·ª≠i y√™u c·∫ßu t√¨m ki·∫øm s·∫£n ph·∫©m
            }
        });
    }

    /**
     * Quy·∫øt ƒë·ªãnh t·∫£i phi√™n chat hi·ªán c√≥ ho·∫∑c b·∫Øt ƒë·∫ßu m·ªôt phi√™n chat m·ªõi cho ng∆∞·ªùi d√πng.
     * Ph∆∞∆°ng th·ª©c n√†y ƒë∆∞·ª£c g·ªçi m·ªói khi Fragment ƒë∆∞·ª£c t·∫°o ho·∫∑c t√°i t·∫°o View.
     * @param userId ID c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i.
     */
    private void startOrLoadChatSession(String userId) {
        // C·ªë g·∫Øng l·∫•y session ID ƒë√£ l∆∞u cho userId hi·ªán t·∫°i
        final String savedChatSessionId = sessionManager.getChatSessionIdForUser(userId);

        if (savedChatSessionId != null && !savedChatSessionId.isEmpty()) {
            // Tr∆∞·ªùng h·ª£p 1: C√≥ session ID ƒë√£ l∆∞u cho user n√†y (ch∆∞a logout)
            currentChatSessionId = savedChatSessionId;
            Log.d("ChatAI", "Loaded existing chat session: " + currentChatSessionId + " for user: " + userId);

            // X√≥a b·∫•t k·ª≥ tin nh·∫Øn ch·ªù n√†o v√† th√™m tin nh·∫Øn "ƒêang t·∫£i..." m·ªõi
            messageList.clear(); // X√≥a s·∫°ch ƒë·ªÉ chu·∫©n b·ªã hi·ªÉn th·ªã l·ªãch s·ª≠
            chatAdapter.notifyDataSetChanged();
            addMessage("assistant", "ƒêang t·∫£i l·ªãch s·ª≠ chat...");

            // T·∫£i l·ªãch s·ª≠ tin nh·∫Øn c·ªßa phi√™n hi·ªán t·∫°i
            loadChatMessages(currentChatSessionId);

        } else {
            // Tr∆∞·ªùng h·ª£p 2: Kh√¥ng c√≥ session ID ƒë√£ l∆∞u cho user n√†y
            // (c√≥ th·ªÉ l√† l·∫ßn ƒë·∫ßu chat, ho·∫∑c ƒë√£ logout v√† login l·∫°i)
            Log.d("ChatAI", "No existing chat session found for user: " + userId + ". Starting a new one.");
            startNewChatSession(userId);
        }
    }

    /**
     * B·∫Øt ƒë·∫ßu m·ªôt phi√™n chat m·ªõi tr√™n Backend v√† l∆∞u ID phi√™n.
     * @param userId ID c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i.
     */
    private void startNewChatSession(String userId) {
        // ƒê·∫£m b·∫£o UI tr·ªëng r·ªóng cho m·ªôt session m·ªõi
        messageList.clear();
        chatAdapter.notifyDataSetChanged();
        addMessage("assistant", "ƒêang kh·ªüi t·∫°o phi√™n chat m·ªõi..."); // Th√¥ng b√°o cho ng∆∞·ªùi d√πng

        apiService.startChatSession(userId).enqueue(new Callback<ChatSessionResponse>() {
            @Override
            public void onResponse(Call<ChatSessionResponse> call, Response<ChatSessionResponse> response) {
                if (response.isSuccessful() && response.body() != null) {
                    currentChatSessionId = response.body().getChatSessionID();
                    // L∆∞u ChatSessionID v√†o SessionManager v·ªõi userId c·ª• th·ªÉ
                    sessionManager.saveChatSessionIdForUser(userId, currentChatSessionId);
                    Log.d("ChatAI", "Started new chat session: " + currentChatSessionId + " for user: " + userId);
                    // Sau khi t·∫°o th√†nh c√¥ng session m·ªõi, hi·ªÉn th·ªã tin nh·∫Øn ch√†o m·ª´ng ch√≠nh th·ª©c
                    replaceLastAssistantMessage("Ch√†o b·∫°n, t√¥i l√† tr·ª£ l√Ω AI. B·∫°n mu·ªën t√¨m s·∫£n ph·∫©m n√†o?");
                } else {
                    Log.e("ChatAI", "Failed to start chat session: " + response.code() + " - " + response.message());
                    Toast.makeText(getContext(), "Kh√¥ng th·ªÉ b·∫Øt ƒë·∫ßu phi√™n chat.", Toast.LENGTH_SHORT).show();
                    currentChatSessionId = null; // ƒê·∫£m b·∫£o null n·∫øu c√≥ l·ªói
                    replaceLastAssistantMessage("L·ªói: Kh√¥ng th·ªÉ b·∫Øt ƒë·∫ßu phi√™n chat. M√£ l·ªói: " + response.code()); // C·∫≠p nh·∫≠t tin nh·∫Øn l·ªói chi ti·∫øt h∆°n
                }
            }

            @Override
            public void onFailure(Call<ChatSessionResponse> call, Throwable t) {
                Log.e("ChatAI", "Error starting chat session", t);
                Toast.makeText(getContext(), "L·ªói k·∫øt n·ªëi khi b·∫Øt ƒë·∫ßu chat.", Toast.LENGTH_SHORT).show();
                currentChatSessionId = null; // ƒê·∫£m b·∫£o null n·∫øu c√≥ l·ªói
                replaceLastAssistantMessage("L·ªói k·∫øt n·ªëi khi b·∫Øt ƒë·∫ßu chat: " + t.getMessage()); // C·∫≠p nh·∫≠t tin nh·∫Øn l·ªói chi ti·∫øt h∆°n
            }
        });
    }

    /**
     * T·∫£i l·ªãch s·ª≠ tin nh·∫Øn c·ªßa m·ªôt phi√™n chat c·ª• th·ªÉ t·ª´ Backend.
     * @param sessionId ID c·ªßa phi√™n chat c·∫ßn t·∫£i l·ªãch s·ª≠.
     */
    private void loadChatMessages(String sessionId) {
        apiService.getChatMessages(sessionId).enqueue(new Callback<List<ChatMessage>>() {
            @Override
            public void onResponse(Call<List<ChatMessage>> call, Response<List<ChatMessage>> response) {
                if (response.isSuccessful() && response.body() != null) {
                    List<ChatMessage> fetchedMessages = response.body();

                    if (isAdded()) { // ƒê·∫£m b·∫£o Fragment v·∫´n c√≤n ƒë∆∞·ª£c g·∫Øn v√†o Activity
                        requireActivity().runOnUiThread(() -> {
                            // X√≥a tin nh·∫Øn "ƒêang t·∫£i l·ªãch s·ª≠ chat..." ban ƒë·∫ßu
                            if (!messageList.isEmpty() && "assistant".equals(messageList.get(messageList.size() - 1).getRole())) {
                                String lastAssistantMsgContent = messageList.get(messageList.size() - 1).getContent();
                                if (lastAssistantMsgContent.equals("ƒêang t·∫£i l·ªãch s·ª≠ chat...") ||
                                        lastAssistantMsgContent.startsWith("L·ªói khi t·∫£i l·ªãch s·ª≠ chat:") ||
                                        lastAssistantMsgContent.startsWith("L·ªói k·∫øt n·ªëi khi t·∫£i l·ªãch s·ª≠ chat:")) {
                                    messageList.remove(messageList.size() - 1);
                                    chatAdapter.notifyItemRemoved(messageList.size());
                                }
                            }

                            // X√≥a to√†n b·ªô danh s√°ch hi·ªán c√≥ v√† th√™m c√°c tin nh·∫Øn ƒë√£ fetch
                            messageList.clear(); // Clear l·∫°i l·∫ßn n·ªØa ƒë·ªÉ ch·∫Øc ch·∫Øn tr∆∞·ªõc khi add data

                            if (fetchedMessages.isEmpty()) {
                                Log.d("ChatAI", "No chat messages found for session: " + sessionId);
                                addMessage("assistant", "Ch√†o m·ª´ng b·∫°n tr·ªü l·∫°i! Kh√¥ng c√≥ tin nh·∫Øn n√†o trong phi√™n n√†y. H√£y b·∫Øt ƒë·∫ßu m·ªôt cu·ªôc tr√≤ chuy·ªán m·ªõi.");
                            } else {
                                Log.d("ChatAI", "Loaded " + fetchedMessages.size() + " messages for session: " + sessionId);
                                for (com.example.shoeshop.models.ChatMessage msg : fetchedMessages) {
                                    addMessage(msg.getSenderID().equals(currentUserId) ? "user" : "assistant", msg.getMessage());
                                }
                                // Th√™m m·ªôt tin nh·∫Øn ch√†o m·ª´ng ho·∫∑c k·∫øt th√∫c sau khi t·∫£i l·ªãch s·ª≠ ho√†n t·∫•t
                                addMessage("assistant", "Ch√†o m·ª´ng b·∫°n tr·ªü l·∫°i! ƒê√¢y l√† l·ªãch s·ª≠ chat c·ªßa b·∫°n.");
                            }
                            // Cu·ªôn xu·ªëng cu·ªëi sau khi t·∫•t c·∫£ tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c th√™m
                            recyclerChat.scrollToPosition(messageList.size() - 1);
                        });
                    }

                } else {
                    Log.e("ChatAI", "Failed to load chat messages: " + response.code() + " - " + response.message());
                    if (isAdded()) {
                        replaceLastAssistantMessage("L·ªói khi t·∫£i l·ªãch s·ª≠ chat: " + response.code() + " - " + response.message());
                    }
                }
            }

            @Override
            public void onFailure(Call<List<ChatMessage>> call, Throwable t) {
                Log.e("ChatAI", "Error loading chat messages", t);
                if (isAdded()) {
                    replaceLastAssistantMessage("L·ªói k·∫øt n·ªëi khi t·∫£i l·ªãch s·ª≠ chat: " + t.getMessage());
                }
            }
        });
    }

    private void saveChatMessage(String senderId, String messageContent, String sessionId) {
        if (sessionId == null || sessionId.isEmpty()) {
            Log.e("ChatAI", "Cannot save message: ChatSessionID is null or empty.");
            return;
        }
        ChatMessageRequest messageRequest = new ChatMessageRequest(senderId, messageContent, sessionId);
        apiService.sendChatMessage(messageRequest).enqueue(new Callback<Void>() {
            @Override
            public void onResponse(Call<Void> call, Response<Void> response) {
                if (response.isSuccessful()) {
                    Log.d("ChatAI", "Message saved successfully.");
                } else {
                    Log.e("ChatAI", "Failed to save message: " + response.code() + " - " + response.message());
                }
            }

            @Override
            public void onFailure(Call<Void> call, Throwable t) {
                Log.e("ChatAI", "Error saving message", t);
            }
        });
    }

    private void addMessage(String role, String content) {
        messageList.add(new ChatMessage(role, content));
        if (isAdded()) { // Ki·ªÉm tra Fragment c√≥ ƒë∆∞·ª£c g·∫Øn v√†o Activity kh√¥ng
            requireActivity().runOnUiThread(() -> {
                chatAdapter.notifyItemInserted(messageList.size() - 1);
                recyclerChat.scrollToPosition(messageList.size() - 1);
            });
        }
    }

    private void replaceLastAssistantMessage(String newContent) {
        if (isAdded()) { // Ki·ªÉm tra Fragment c√≥ ƒë∆∞·ª£c g·∫Øn v√†o Activity kh√¥ng
            requireActivity().runOnUiThread(() -> {
                // Duy·ªát ng∆∞·ª£c t·ª´ cu·ªëi ƒë·ªÉ t√¨m tin nh·∫Øn c·ªßa assistant
                for (int i = messageList.size() - 1; i >= 0; i--) {
                    if ("assistant".equals(messageList.get(i).getRole())) {
                        messageList.get(i).setContent(newContent);
                        chatAdapter.notifyItemChanged(i);
                        recyclerChat.scrollToPosition(i);
                        return; // ƒê√£ t√¨m th·∫•y v√† c·∫≠p nh·∫≠t, tho√°t v√≤ng l·∫∑p
                    }
                }
                // N·∫øu kh√¥ng t√¨m th·∫•y tin nh·∫Øn assistant n√†o ƒë·ªÉ thay th·∫ø (v√≠ d·ª•: danh s√°ch r·ªóng), th√™m tin nh·∫Øn m·ªõi
                addMessage("assistant", newContent);
            });
        }
    }

    private void handleSearch(String prompt) {
        ProductSearchInfo info = extractProductInfo(prompt.toLowerCase(Locale.getDefault()));

        Log.d("ChatAI", "Search: name=" + info.productName + ", size=" + info.size + ", color=" + info.color
                + ", minPrice=" + info.minPrice + ", maxPrice=" + info.maxPrice);

        Log.d("ChatAI", "Parsed minPrice: " + info.minPrice + ", Parsed maxPrice: " + info.maxPrice);

        Call<List<Product>> call = apiService.searchProducts(
                info.productName, info.size, info.color, info.minPrice, info.maxPrice
        );

        call.enqueue(new Callback<List<Product>>() {
            @Override
            public void onResponse(Call<List<Product>> call, Response<List<Product>> response) {
                String aiReply;
                if (response.isSuccessful() && response.body() != null) {
                    List<Product> products = response.body();
                    if (products.isEmpty()) {
                        aiReply = "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o ph√π h·ª£p v·ªõi y√™u c·∫ßu c·ªßa b·∫°n.";
                    } else {
                        StringBuilder reply = new StringBuilder("T√¨m th·∫•y c√°c s·∫£n ph·∫©m sau:\n");
                        for (Product product : products) {
                            reply.append("- ").append(product.getProductName())
                                    .append(" (Size: ").append(product.getSize())
                                    .append(", M√†u: ").append(product.getColor())
                                    .append(", Gi√°: ").append(String.format(Locale.getDefault(), "%,.0f", product.getTotal()))
                                    .append(" VNƒê)\n");
                        }
                        aiReply = reply.toString().trim();
                    }
                } else {
                    aiReply = "‚ùå L·ªói t·ª´ m√°y ch·ªß: " + response.code();
                }

                if (isAdded()) {
                    requireActivity().runOnUiThread(() -> {
                        replaceLastAssistantMessage(aiReply);
                        saveChatMessage("assistant", aiReply, currentChatSessionId);
                        btnSend.setEnabled(true); // K√≠ch ho·∫°t l·∫°i n√∫t g·ª≠i
                    });
                }
            }

            @Override
            public void onFailure(Call<List<Product>> call, Throwable t) {
                String aiReply = "‚ùå L·ªói k·∫øt n·ªëi: " + t.getMessage();
                if (isAdded()) {
                    requireActivity().runOnUiThread(() -> {
                        replaceLastAssistantMessage(aiReply);
                        saveChatMessage("assistant", aiReply, currentChatSessionId);
                        btnSend.setEnabled(true);
                    });
                }
            }
        });
    }

    private static class ProductSearchInfo {
        String productName;
        String size;
        String color;
        Double minPrice;
        Double maxPrice;
    }

    private ProductSearchInfo extractProductInfo(String prompt) {
        ProductSearchInfo info = new ProductSearchInfo();

        Matcher nameMatcherWithKeyword = Pattern.compile("(?:gi√†y|d√©p|s·∫£n ph·∫©m)\\s+((?!size|m√†u|gi√°)[\\p{L}\\d\\s]{2,30})", Pattern.CASE_INSENSITIVE).matcher(prompt);
        if (nameMatcherWithKeyword.find()) {
            info.productName = nameMatcherWithKeyword.group(1).trim();
        } else {
            if (prompt.length() >= 2 && prompt.length() <= 30 &&
                    !prompt.contains("size") && !prompt.contains("m√†u") && !prompt.contains("gi√°") &&
                    !prompt.contains("t·ª´") && !prompt.contains("ƒë·∫øn") &&
                    !prompt.contains("tr√™n") && !prompt.contains("d∆∞·ªõi") &&
                    !prompt.contains("l√†") && !prompt.contains("g√¨")
            ) {
                info.productName = prompt;
            } else if (prompt.contains("gi√†y")) {
                info.productName = "gi√†y";
            } else if (prompt.contains("d√©p")) {
                info.productName = "d√©p";
            }
        }

        info.size = extractParameter(prompt, "\\b(?:gi√†y|size|s·ªë|c·ª°)\\s*(\\d{1,2})\\b", 1);

        info.color = extractParameter(prompt, "(?:m√†u|m√†u s·∫Øc)\\s+([^,.]+)", 1);
        if (info.color == null) {
            for (String color : new String[]{"ƒë·ªè", "ƒëen", "tr·∫Øng", "xanh", "xanh d∆∞∆°ng", "xanh l√°", "v√†ng", "n√¢u", "cam", "h·ªìng", "ƒëas·∫Øc", "b·∫°c"}) {
                if (prompt.contains(color)) {
                    info.color = color;
                    break;
                }
            }
        }

        Matcher priceRange = Pattern.compile("gi√°\\s*t·ª´\\s*(\\d+(?:k|tr|tri·ªáu)?)\\s*ƒë·∫øn\\s*(\\d+(?:k|tr|tri·ªáu)?)", Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE).matcher(prompt);
        if (priceRange.find()) {
            info.minPrice = parsePrice(priceRange.group(1));
            info.maxPrice = parsePrice(priceRange.group(2));
        } else {
            info.minPrice = parsePrice(extractParameter(prompt, "(?:t·ª´|tr√™n|h∆°n|gi√° t·ª´)\\s*(\\d+(?:k|tr|tri·ªáu)?)", 1));
            info.maxPrice = parsePrice(extractParameter(prompt, "(?:ƒë·∫øn|d∆∞·ªõi|gi√° ƒë·∫øn)\\s*(\\d+(?:k|tr|tri·ªáu)?)", 1));
        }

        return info;
    }

    private String extractParameter(String text, String regex, int groupIndex) {
        Pattern pattern = Pattern.compile(regex, Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);
        Matcher matcher = pattern.matcher(text);
        return matcher.find() ? matcher.group(groupIndex).trim() : null;
    }

    private Double parsePrice(String priceString) {
        if (priceString == null) return null;
        priceString = priceString.replace(".", "").replace(",", "").toLowerCase();
        try {
            if (priceString.contains("k")) {
                return Double.parseDouble(priceString.replace("k", "")) * 1000;
            }
            if (priceString.contains("tr") || priceString.contains("tri·ªáu")) {
                return Double.parseDouble(priceString.replace("tr", "").replace("tri·ªáu", "")) * 1_000_000;
            }
            return Double.parseDouble(priceString);
        } catch (NumberFormatException e) {
            Log.e("ChatAI", "Error parsing price: '" + priceString + "'", e);
            return null;
        }
    }
}